function run_read_data(fname)
% This function determines whether the 'read_dataX.m' (where X is the
% number of the most recent version) script must be run on the AFINES
% Simulation outputs. This code is isolated in an imbedded function to
% prevent the clearing of local variables in the script or function that
% calls this function. The script 'read_dataX.m' is run on the simulation
% outputs if the data exists, but 'read_dataX.m' has not been run yet.
% Additionally, 'read_dataX.m' is run for all simulations that have a zero
% density condition for motors or crosslinkers, due to the unexpected
% format of the variable 'timestep' generated by previous iterations of the
% script ('read_data3.m' and prior).
% 
% INPUTS    fname        : String, name of file to be analyzed
% 
% OUTPUTS   NONE

%% 'read_data4.m' has already been run on all the data
% if exist('simdata.mat', 'file') && sum(strfind(fname,'0.0')) %Check for simulations with zero density conditions & run 'read_data3.m' to fix the 'timestep' variable
%         disp(sprintf('Simulation with zero motor or crosslinker density\nRunning ''read_data4.m'' to fix the initial value of the ''timestep'' variable'))
%         run read_data4.m;
% elseif ~exist('simdata.mat', 'file') && exist('txt_stack', 'file')
%%
if ~exist('simdata.mat', 'file') && exist('txt_stack', 'file') 
    disp('Need simdata.mat file, will create one now')
    run read_data4.m; %Most recent version of the function (IAL: 1/31/17)
elseif ~exist('simdata.mat', 'file') && ~exist('txt_stack', 'file')
    disp('No simdata.mat file')
    disp('No folder txt_stack with actins.txt inside, so can"t make simdata.mat')
    disp('Do it yourself.')
    return
end


end

